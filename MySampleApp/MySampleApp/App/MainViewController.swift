//
//  MainViewController.swift
//  MySampleApp
//
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.1
//

import UIKit
import AWSMobileHubHelper
import Firebase

class MainViewController: UIViewController, ImageStoreDelegate {
    
    @IBOutlet var countLabel: UILabel!
    @IBOutlet var progressBar: KYCircularProgress!
    @IBOutlet var kolodaView: KolodaView!
    private var downloadContentsIndices: [Int] = []
    var manager: AWSContentManager!
    
    var imageStore: ImageStore!
    
    //TODO change this
    var adCount: Int = 0
    var contentCount: Int = 0
    var userFBRef: Firebase!
    
    var userUID: String!{
        didSet{
            let tempRef = Firebase(url: "https://enas400hype.firebaseio.com/")
            userFBRef = tempRef.childByAppendingPath("users").childByAppendingPath(userUID)
        }
    }
    
    var keyForFriend: String!{
        didSet{
            self.performSegueWithIdentifier("showUsersTableViewSegue", sender: nil)
        }
    }
    
    //Create subview for kolodaView, add Koloda view, and pass protocols
    override func viewDidLoad() {
        super.viewDidLoad()
        
        progressBar.lineWidth = 10.0
        progressBar.guideLineWidth = 10.0
        progressBar.progressGuideColor = UIColor(red: 212/255, green: 212/255, blue: 212/255, alpha: 1)
        progressBar.showProgressGuide = true
        progressBar.colors = [UIColor(red: 255/255, green: 56/255, blue: 73/255, alpha: 1)]
        
        kolodaView.dataSource = self
        kolodaView.delegate = self
        
        self.modalTransitionStyle = UIModalTransitionStyle.FlipHorizontal
        
    }
    
    override func viewDidAppear(animated: Bool) {

        userFBRef.observeEventType(.Value, withBlock: { (snapshot) in
            let data = snapshot.value["contentCount"] as? Int
            if let t = data{
                self.contentCount = t
                self.countLabel.text = "\(self.contentCount)"
            }
            //add error handler?
            
        })
    }
    
    func initImageStore(){
        imageStore = ImageStore(delegate: self, awsManager: manager)
        let fbRef = userFBRef.childByAppendingPath("adsFromFriends")
        fbRef.observeEventType(.ChildAdded, withBlock: { (snapshot) in
            let contentKey = snapshot.value as? String
            if let key = contentKey{
                self.imageStore.addContentByKey(key, shouldDownload: true)
            }
        })
        
        imageStore.initializeCardsFromAWS()
    }
    
    func checkAdCount(){
        userFBRef.childByAppendingPath("adViewedCount").setValue(adCount)
        progressBar.progress = Double(adCount)/Double(Constants.ADSPERCONTENT)
        if(adCount % Constants.ADSPERCONTENT) == 0 {
            contentCount++
            userFBRef.childByAppendingPath("contentCount").setValue(contentCount)
            adCount = 0
            
        }
    }
    
    @IBAction func onSwipeRightClicked(sender: AnyObject){
        kolodaView.swipe(SwipeResultDirection.Right)
    }
    @IBAction func onSwipeLeftClicked(sender: AnyObject){
        kolodaView.swipe(SwipeResultDirection.Left)
    }
    
    func newCardImageLoaded(cardIndex: Int){
        downloadContentsIndices.append(cardIndex)
        if downloadContentsIndices.count == 1 {
            kolodaView.reloadData()
        }
    }
    
    @IBAction func unwindFromUsersSegue(segue: UIStoryboardSegue){
        
    }

}

// KolodaView protocol that determines what cards to show
extension MainViewController: KolodaViewDataSource{
    func koloda(kolodaNumberOfCards koloda:KolodaView) -> UInt {
        return UInt(downloadContentsIndices.count)
        
    }
    
    //Return a new view (card) to show from ImageStore
    func koloda(koloda: KolodaView, viewForCardAtIndex index: UInt) -> UIView {
        if let image = imageStore.getContentImageAtCardIndex(downloadContentsIndices[Int(index)]) {
//            let newView = UIImageView(image: image)
//            let newContainerView = UIView(frame: kolodaView.frameForCardAtIndex(0))
            let superFrame = kolodaView.frameForCardAtIndex(0)
            let newContainerView = UIView(frame: superFrame)
            newContainerView.layer.cornerRadius = 20
            
            newContainerView.backgroundColor = UIColor.whiteColor()
            newContainerView.layer.shadowOpacity = 0.7
            newContainerView.layer.shadowOffset = CGSizeZero
            newContainerView.layer.shadowRadius = 10
            
//            newContainerView.layer.borderColor = UIColor.blackColor().CGColor
//            newContainerView.layer.borderWidth = 2.0
            
//            newContainerView.backgroundColor = UIColor.redColor()
            
            let childFrame = CGRectInset(superFrame, 7, 7)
            let newChildView = UIImageView(frame: childFrame)
            newChildView.image = image
            newChildView.layer.masksToBounds = true
            newChildView.layer.cornerRadius = 20
            newContainerView.addSubview(newChildView)
            
            return newContainerView
        } else {
            let newView = UIView()
            let colorArray = [UIColor.blueColor(), UIColor.redColor(), UIColor.greenColor()]
            let index = arc4random_uniform(3)
            newView.backgroundColor = colorArray[Int(index)]
            return newView
        }
    }
    
    override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {

        if segue.identifier == "showUsersTableViewSegue" {
            let newVC = segue.destinationViewController as! UsersTableViewController
            newVC.keyForFriend = keyForFriend
            newVC.ownUID = userUID
            
//            newVC.height = UIScreen.mainScreen().bounds.height -
//                self.view.bounds.height
//            newVC.view.superview?.frame = CGRectMake(0, 0, UIScreen.mainScreen().bounds.width, height)
        }
    }
        
}

// Own implemenation upon swiping so can clear image cache of given card
extension MainViewController: KolodaViewDelegate {
    func koloda(koloda: KolodaView, didSwipedCardAtIndex index: UInt, inDirection direction: SwipeResultDirection) {
        
        adCount++
        checkAdCount()
        imageStore.clearCacheAtCardIndex(downloadContentsIndices[Int(index)])
        
        if direction == .Right {
            let newFBRef = userFBRef.childByAppendingPath("cardsLiked")
            imageStore.pushImageKeyAtCardIndex(downloadContentsIndices[Int(index)], fbRef: newFBRef)
//            imageStore.pushImageURLAtCardIndex(Int(index), fbRef: userFBRef)
        } else if direction == SwipeResultDirection.Up{
            if let key = imageStore.getContentKeyAtIndex(Int(index)){
                keyForFriend = key
            }
        }
        
    }
    func koloda(kolodaDidRunOutOfCards koloda: KolodaView) {
        //Example: reloading
        kolodaView.reloadData()
    }
}





